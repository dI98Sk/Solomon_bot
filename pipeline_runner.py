import time
import logging
from datetime import datetime
from analyzers.CointegrationAnalyzerAsync import CointegrationAnalyzerAsync
from collectors.FuturesDataCollector import FuturesDataCollector
from evaluators.PairPermutationTestEvaluator import PairPermutationTestEvaluator
from simulators.PairTradingSimulatorCoin import PairTradingSimulatorCoin
from utils.telegram_notifier import TelegramNotifier
import os

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(BASE_DIR, "futures_data")
plot_path = os.path.join(BASE_DIR, "delta_distribution.png")


class MainPipelineRunner:
    '''
        –≠—Ç–æ—Ç –ø–∞–π–ø–ª–∞–π–Ω –Ω–∞—Ü–µ–ª–µ–Ω –Ω–∞ –∑–∞–ø—É—Å–∫ –≤—Å–µ–π –≤–µ—Ç–≤–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞,
        —ç—Ç–æ —Å–∫—Ä—ã–≤–∞–µ—Ç –∑–∞ —Å–æ–±–æ–π –º–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö,
        —Ç–∞–∫ —á—Ç–æ –±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Å—Ç–µ–π –∫–æ–¥–∞ –ª—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –∏–∑
        –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ starters
        '''
    def __init__(self):
        self.notifier = TelegramNotifier(
            bot_token="AAE7vzbSwnUNWWszFsvUDSPKorR4jphXYOs",
            chat_id="-1002312259096"
        )

        self.collector = FuturesDataCollector(
            api_key='3HN7Kwu8UrqQ7uWLPZ',
            api_secret='4y5WFAJ4bFch0taGYYOlur0b3ikSO48S9oWM',
            save_dir=DATA_DIR,
            testnet=False,
            interval='60',
            limit=3600
        )

        self.analyzer = CointegrationAnalyzerAsync(
            data_dir=DATA_DIR,
            min_data_points=100,
            pvalue_threshold=0.05,
            max_workers=8
        )

        self.evaluator = PairPermutationTestEvaluator(
            pairs_csv='/Users/papaskakun/PycharmProjects/PythonProject/cointegrated_pairs.csv',
            data_dir='DATA_DIR',
            output_csv='/Users/papaskakun/PycharmProjects/PythonProject/significant_pairs.csv',
            r2_threshold=0.1,
            lag=3,
            max_workers=10
        )

        self.simulator = PairTradingSimulatorCoin(
            data_dir=DATA_DIR,
            pairs_file=os.path.join(BASE_DIR, "top_1pct_significant_pairs.csv")
        )

    def run(self):
        start_time = time.time()
        now = datetime.now()
        self.notifier.send_message(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞: {now}")
        logging.info("Pipeline started")

        try:
            # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            self.collector.collect_all_data()
            logging.info("Data collected.")
            self.notifier.send_message("üì° –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω.")

            # –ó–∞–ø—É—Å–∫ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ –≠–Ω–≥–ª–∞-–ì—Ä–µ–π–Ω–¥–∂–µ—Ä–∞
            self.analyzer.run()
            self.analyzer.save_results("/Users/papaskakun/PycharmProjects/PythonProject/cointegrated_pairs.csv")
            logging.info("Cointegration analysis done.")
            self.notifier.send_message("üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")

            # –ó–∞–ø—É—Å–∫ –æ—Ç–±–æ—Ä—à–∏–∫–∞, —Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Å–∞–º—ã–µ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä—ã
            self.evaluator.run()
            # –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —ç—Ç–∞–ø—É –º—ã –æ—Ç—Å–µ–µ–º 99 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤, –∏ –æ—Å—Ç–∞–≤–∏–º 1 –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö
            self.evaluator.filter_top_percent(top_percent=0.01)
            logging.info("Evaluation done.")
            self.notifier.send_message("üìä –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            # –≠—Ç–æ—Ç —ç—Ç–∞–ø –ø–æ–∑–≤–æ–ª—è–µ—Ç "–æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å"
            '''
                –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è delta = R¬≤_real - R¬≤_shuffled –¥–∞—Å—Ç –Ω–∞–≥–ª—è–¥–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫ –º–Ω–æ–≥–æ –ø–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã,
                 –∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Ä–æ–≥ 1%.
                '''
            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞–¥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ , –ø–∞–π–ø–ª–∞–π–Ω –¥–ª–∏–Ω–Ω—ã–π ( 30–º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ 10 –ø–æ—Ç–æ–∫–∞–º)
            # –∞ —ç—Ç—É —Ñ–∏—á—É –¥–æ–ø–∏–ª–∏–ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤ —Ç–µ–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∞–≥,
            # –ª–æ–≥–∏–∫–∞ –∑–∞—à–∏—Ç–∞ –Ω–∞ .self (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—à—å)
            self.evaluator.plot_delta_distribution()
            graph_path = "/Users/papaskakun/PycharmProjects/PythonProject/delta_distribution.png"
            self.notifier.send_photo(graph_path, caption="üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø–∞—Ä")

            # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            self.simulator.run_batch()
            logging.info("Simulation complete.")
            self.notifier.send_message("üß™ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        except Exception as e:
            logging.error(f"Pipeline failed: {e}")
            self.notifier.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        elapsed = time.time() - start_time
        self.notifier.send_message(f"‚è± –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ: {elapsed / 60:.2f} –º–∏–Ω—É—Ç")
        logging.info(f"Pipeline finished in {elapsed / 60:.2f} minutes.")