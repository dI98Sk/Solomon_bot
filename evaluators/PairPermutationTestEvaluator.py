import os
import pandas as pd
import numpy as np
from tqdm import tqdm
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
from sklearn.utils import shuffle
from concurrent.futures import ThreadPoolExecutor, as_completed
import matplotlib.pyplot as plt

class PairPermutationTestEvaluator:
    """
    –≠—Ç–æ—Ç –æ—Ü–µ–Ω—â–∏–∫ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç (–û—Ç –ø—Ä–æ—Å—á–µ—Ç–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
    –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –ø—Ä–æ—Å—á–µ—Ç –ü–µ—Ä–º—É—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    –í –∫–∞—á–µ—Å–≤–µ –¥–æ–ø–æ–ª–Ω–æ—Ç–∏–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –æ—Ç–±–æ—Ä–∞ —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ä.
    """

    def __init__(self, pairs_csv, data_dir, output_csv='significant_pairs.csv',
                 r2_threshold=0.1, lag=1, max_workers=8):
        self.pairs_csv = pairs_csv
        self.data_dir = data_dir
        self.output_csv = output_csv
        self.r2_threshold = r2_threshold
        self.lag = lag
        self.max_workers = max_workers
        self.pairs_df = None
        self.results = []

    def load_asset_data(self, asset_name):
        path = os.path.join(self.data_dir, f"{asset_name}.csv")
        if not os.path.exists(path):
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            return None
        df = pd.read_csv(path, parse_dates=['timestamp'])
        df = df[['timestamp', 'close']].rename(columns={'close': asset_name})
        return df.set_index('timestamp')

    def evaluate_pair(self, asset_a, asset_b):
        df_a = self.load_asset_data(asset_a)
        df_b = self.load_asset_data(asset_b)
        if df_a is None or df_b is None:
            return None

        df = df_a.join(df_b, how='inner').sort_index()
        df[f'{asset_a}_lag'] = df[asset_a].shift(self.lag)
        df = df.dropna()

        X = df[[f'{asset_a}_lag']]
        y = df[asset_b]

        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X, y)
        y_pred = model.predict(X)
        r2_real = r2_score(y, y_pred)

        X_shuffled = shuffle(X, random_state=42)
        model.fit(X_shuffled, y)
        y_pred_shuffled = model.predict(X_shuffled)
        r2_shuffled = r2_score(y, y_pred_shuffled)

        delta = r2_real - r2_shuffled
        return {
            'asset_a': asset_a,
            'asset_b': asset_b,
            'r2_real': r2_real,
            'r2_shuffled': r2_shuffled,
            'delta': delta
        }

    def filter_top_percent(self, top_percent=0.01):
        if not self.results:
            print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
            return

        df = pd.DataFrame(self.results)
        df_sorted = df.sort_values(by='delta', ascending=False)
        top_n = max(1, int(len(df_sorted) * top_percent))  # –º–∏–Ω–∏–º—É–º 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        df_top = df_sorted.head(top_n)
        filename = os.path.basename(self.output_csv)
        df_top.to_csv(f'top_{int(top_percent * 100)}pct_{filename}', index=False)
        print(f"üîé –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {top_n} —Å–∞–º—ã—Ö –∑–Ω–∞—á–∏–º—ã—Ö –ø–∞—Ä –≤ —Ñ–∞–π–ª: top_{int(top_percent * 100)}pct_{self.output_csv}")


    def plot_delta_distribution(self, bins=50):
        if not self.results:
            print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.")
            return

        df = pd.DataFrame(self.results)
        deltas = df['delta']

        plt.figure(figsize=(10, 6))
        plt.hist(deltas, bins=bins, color='skyblue', edgecolor='black')
        plt.axvline(np.percentile(deltas, 99), color='red', linestyle='--', label='1% –ø–æ—Ä–æ–≥')
        plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (delta R¬≤)")
        plt.xlabel("Delta R¬≤ (R¬≤_real - R¬≤_shuffled)")
        plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig("delta_distribution.png")
        plt.show()
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: delta_distribution.png")

    def run_async_evaluation(self):
        self.pairs_df = pd.read_csv(self.pairs_csv)
        futures = {}

        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            for _, row in self.pairs_df.iterrows():
                pair_str = row['pair']
                try:
                    asset_a, asset_b = pair_str.split('/')
                    future = executor.submit(self.evaluate_pair, asset_a, asset_b)
                    futures[future] = pair_str
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–µ {pair_str}: {e}")

            print("–í—ã–ø–æ–ª–Ω—è–µ–º –ü–µ—Ä–º—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
            print("‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä...")
            for future in tqdm(as_completed(futures), total=len(futures)):
                pair_str = futures[future]
                try:
                    result = future.result()
                    if result and result['delta'] > self.r2_threshold:
                        self.results.append(result)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {pair_str}: {e}")

    def save_results(self):
        df = pd.DataFrame(self.results)
        df.to_csv(self.output_csv, index=False)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_csv}")

    def run(self):
        self.run_async_evaluation()
        self.save_results()


if __name__ == "__main__":
    evaluator = PairPermutationTestEvaluator(
        pairs_csv='cointegrated_pairs.csv',
        data_dir='/futures_data',
        output_csv='significant_pairs.csv',
        r2_threshold=0.1,
        lag=3,
        max_workers=10
    )
    evaluator.run()
    # –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —ç—Ç–∞–ø—É –º—ã –æ—Ç—Å–µ–µ–º 99 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤, –∏ –æ—Å—Ç–∞–≤–∏–º 1 –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∞–º—ã—Ö —Ö–Ω–∞—á–∏–º—ã—Ö
    evaluator.filter_top_percent(top_percent=0.01)  # ‚Üê –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 1%

    # –≠—Ç–æ—Ç —ç—Ç–∞–ø –ø–æ–∑–≤–æ–ª—è–µ—Ç "–æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å"
    '''
    –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è delta = R¬≤_real - R¬≤_shuffled –¥–∞—Å—Ç –Ω–∞–≥–ª—è–¥–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫ –º–Ω–æ–≥–æ –ø–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã,
     –∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ—Ä–æ–≥ 1%.
    '''
    # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞–¥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ , –ø–∞–π–ø–ª–∞–π–Ω –¥–ª–∏–Ω–Ω—ã–π ( 30–º–∏–Ω—É—Ç –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ 10 –ø–æ—Ç–æ–∫–∞–º)
    # –∞ —ç—Ç—É —Ñ–∏—á—É –¥–æ–ø–∏–ª–∏–ª –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –≤ —Ç–µ–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–∞–≥,
    # –ª–æ–≥–∏–∫–∞ –∑–∞—à–∏—Ç–∞ –Ω–∞ .self (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—à—å)
    evaluator.plot_delta_distribution()