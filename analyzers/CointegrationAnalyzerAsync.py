import os
import pandas as pd
import numpy as np
from statsmodels.tsa.stattools import coint
from itertools import combinations
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm


class CointegrationAnalyzerAsync:
    """
       –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏.

       –¶–µ–ª—å:
       –ù–∞–π—Ç–∏ –ø–∞—Ä—ã –∞–∫—Ç–∏–≤–æ–≤, –º–µ–∂–¥—É –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–≤—è–∑—å, —Ç–æ –µ—Å—Ç—å
       –∏—Ö —Ü–µ–Ω–æ–≤—ã–µ —Ä—è–¥—ã –∏–º–µ—é—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å. –≠—Ç–æ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
       –≤ –ø–∞—Ä–Ω–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ.

       –ê–ª–≥–æ—Ä–∏—Ç–º:
       1. –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å—Ç–æ–ª–±—Ü—ã 'timestamp' –∏ 'close'.
       2. –§–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –∞–∫—Ç–∏–≤–æ–≤.
       3. –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–∞ –≠–Ω–≥–ª–∞-–ì—Ä–µ–π–Ω–¥–∂–µ—Ä–∞.
       4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é ThreadPoolExecutor.
       5. –ü–∞—Ä—ã —Å p-value –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏.
       6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª.

       –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
       - data_dir: –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å CSV-—Ñ–∞–π–ª–∞–º–∏
       - min_data_points: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
       - pvalue_threshold: –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ p-value –¥–ª—è –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
       - max_workers: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
       """

    def __init__(self, data_dir, min_data_points=100, pvalue_threshold=0.05, max_workers=8):
        self.data_dir = data_dir
        self.min_data_points = min_data_points
        self.pvalue_threshold = pvalue_threshold
        self.max_workers = max_workers
        self.data = self._load_data()
        self.results = []

    def _load_data(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—á–∏—â–∞–µ—Ç CSV-—Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏.
        –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—É—é –¥–ª–∏–Ω—É.
        """
        data = {}
        for file in os.listdir(self.data_dir):
            if file.endswith(".csv"):
                df = pd.read_csv(os.path.join(self.data_dir, file))
                if 'timestamp' not in df.columns or 'close' not in df.columns:
                    continue
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                df = df.sort_values('timestamp')
                if len(df) < self.min_data_points:
                    continue
                name = os.path.splitext(file)[0]
                df = df[['timestamp', 'close']].dropna()
                data[name] = df
        return data

    def _check_cointegration(self, pair):
        """
                –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É –¥–≤—É–º—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä—è–¥–∞–º–∏ (—Ü–µ–Ω–∞–º–∏ –∞–∫—Ç–∏–≤–æ–≤).
                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–æ–π –∏ p-value, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ.
        """
        a, b = pair
        df1 = self.data[a].set_index('timestamp')
        df2 = self.data[b].set_index('timestamp')
        merged = pd.merge(df1, df2, left_index=True, right_index=True, suffixes=('_a', '_b'))

        if len(merged) < self.min_data_points:
            return None

        try:
            score, pvalue, _ = coint(merged['close_a'], merged['close_b'])
            if pvalue < self.pvalue_threshold:
                return {'pair': f'{a}/{b}', 'p-value': round(pvalue, 5)}
        except Exception:
            return None
        return None

    def run(self):
        """
                –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
        """
        symbols = list(self.data.keys())
        all_pairs = list(combinations(symbols, 2))
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_pairs)} –ø–∞—Ä –Ω–∞ –∫–æ–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")

        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            futures = {executor.submit(self._check_cointegration, pair): pair for pair in all_pairs}
            for future in tqdm(as_completed(futures), total=len(futures), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä"):
                result = future.result()
                if result:
                    self.results.append(result)

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.results)} –∫–æ–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä.")
        return self.results

    def save_results(self, filepath="/Users/papaskakun/PycharmProjects/PythonProject/cointegrated_pairs.csv"):
        """
                –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ CSV-—Ñ–∞–π–ª.
        """
        if not self.results:
            print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return
        df = pd.DataFrame(self.results)
        df.sort_values(by="p-value", inplace=True)
        df.to_csv(filepath, index=False)
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {filepath}")